import pandas as pd
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import numpy as np

# Isolate filenames and labels from column 1 and column 2 of parsed file
def load_labels(file_path):
    labels_df = pd.read_csv(file_path, header=None)
    filenames = labels_df.iloc[:, 0].tolist()
    labels = labels_df.iloc[:, 1].tolist()
    return filenames, labels

# Change according to analysed dataset
ground_truth = "/home/Student/s4582342/ConGD/test_labels_single.csv"
predicted_file = "/home/Student/s4582342/ConGD/predictions_rgb.csv"


ground_truth_filenames, ground_truth_labels = load_labels(ground_truth)
predicted_filenames, predicted_labels = load_labels(predicted_file)

# Defined subset of labels to be considered
label_subset = [187, 222, 173, 84, 0, 244, 17, 52, 105, 143, 219]  # Replace with the specific labels you want to include

# Filter ground truth and predicted labels according to defined subset
ground_truth_labels = [label for label in ground_truth_labels if label in label_subset]
predicted_labels = [label for label in predicted_labels if label in label_subset]

# Create confusion matrix
confusion = confusion_matrix(ground_truth_labels, predicted_labels)

# Display the confusion matrix as a heatmap
# Generated by OpenAI's ChatGPT
def plot_confusion_matrix(confusion, classes):
    plt.imshow(confusion, interpolation='nearest', cmap=plt.cm.Blues)
    plt.title('Confusion Matrix for ConGD Dataset')
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = 'd'
    thresh = confusion.max() / 2.0
    for i in range(confusion.shape[0]):
        for j in range(confusion.shape[1]):
            plt.text(j, i, format(confusion[i, j], fmt),
                     ha="center", va="center",
                     color="white" if confusion[i, j] > thresh else "black")

    plt.ylabel('True Labels')
    plt.xlabel('Predicted Labels')
    plt.show()

# Get unique class labels within the subset
unique_labels = sorted(list(set(ground_truth_labels + predicted_labels)))

plot_confusion_matrix(confusion, unique_labels)

# Save plot to specific filepath
output_file_path = '/home/Student/s4582342/confusionmatrix_ConGD.png'  # Replace with your desired file path and extension
plt.savefig(output_file_path, dpi=300)


